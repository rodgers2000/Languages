tuneGrid = gridControl)
return(ada_fit)
}
Core = layer_1_old_data(Core)
Core = layer_2_old_data(Core)
Core = layer_1_new_data(Core)
Core = layer_2_new_data(Core)
sum(Core$Test$X2 == Core$Test$Y) / length(Core$Test$Y)
model = knn_caret(Core$Train$X, Core$Train$Y)
yhats = predict(model, newdata = Core$Test$X)
sum(yhats == Core$Test$Y) / length(Core$Test$Y)
layer_1_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Models[[2]] = ada_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X)
}
Core$Train$X1 = data.frame(Features)
Core$Models$Layer1 = Trained_Models
return(Core)
}
Core = layer_1_old_data(Core)
knn_caret <- function(X, Y) {
fitControl = trainControl(method = "cv")
gridControl = expand.grid(k = 1:25)
knn_fit = train(X, factor(Y),
method = "knn",
trControl = fitControl,
tuneGrid = gridControl)
return(knn_fit)
}
ada_caret <- function(X, Y) {
fitControl = trainControl(method = "cv")
gridControl = expand.grid(method = "Adaboost.M1", nIter = c(25, 50, 75))
ada_fit = train(X, factor(Y),
method = "adaboost",
trControl = fitControl,
tuneGrid = gridControl)
return(ada_fit)
}
layer_1_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Models[[2]] = ada_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X)
}
Core$Train$X1 = data.frame(Features)
Core$Models$Layer1 = Trained_Models
return(Core)
}
layer_1_new_data <- function(Core) {
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer1))
for (i in 1:length(Core$Models$Layer1)) {
Features[, i] = predict(Core$Models$Layer1[[i]], newdata = Core$Test$X)
}
Core$Test$X1 = data.frame(Features)
return(Core)
}
layer_2_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X1, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X1)
}
Core$Train$X2 = data.frame(Features)
Core$Models$Layer2 = Trained_Models
return(Core)
}
Core = layer_2_old_data(Core)
layer_2_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X1, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X1)
}
Core$Train$X2 = data.frame(Features)
Core$Models$Layer2 = Trained_Models
return(Core)
}
layer_2_new_data <- function(Core) {
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer2))
for (i in 1:length(Core$Models$Layer1)) {
Features[, i] = predict(Core$Models$Layer2[[i]], newdata = Core$Test$X1)
}
Core$Test$X2 = Features
return(Core)
}
Core = layer_1_old_data(Core)
knn_caret <- function(X, Y) {
fitControl = trainControl(method = "cv")
gridControl = expand.grid(k = 1:25)
knn_fit = train(X, factor(Y),
method = "knn",
trControl = fitControl,
tuneGrid = gridControl)
return(knn_fit)
}
ada_caret <- function(X, Y) {
fitControl = trainControl(method = "cv")
gridControl = expand.grid(method = "Adaboost.M1", nIter = c(5, 10))
ada_fit = train(X, factor(Y),
method = "adaboost",
trControl = fitControl,
tuneGrid = gridControl)
return(ada_fit)
}
layer_1_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Models[[2]] = ada_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X)
}
Core$Train$X1 = data.frame(Features)
Core$Models$Layer1 = Trained_Models
return(Core)
}
layer_1_new_data <- function(Core) {
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer1))
for (i in 1:length(Core$Models$Layer1)) {
Features[, i] = predict(Core$Models$Layer1[[i]], newdata = Core$Test$X)
}
Core$Test$X1 = data.frame(Features)
return(Core)
}
Core = layer_1_old_data(Core)
Core = layer_2_old_data(Core)
Core = layer_1_new_data(Core)
Core = layer_2_new_data(Core)
sum(Core$Test$X2 == Core$Test$Y) / length(Core$Test$Y)
model = knn_caret(Core$Train$X, Core$Train$Y)
yhats = predict(model, newdata = Core$Test$X)
sum(yhats == Core$Test$Y) / length(Core$Test$Y)
source('~/Documents/other/languages/r/R/rstudio/machine-learning/Stacking/layer 1.R')
Core = layer_1_old_data(Core)
Core = layer_2_old_data(Core)
Core = layer_1_new_data(Core)
Core = layer_2_new_data(Core)
sum(Core$Test$X2 == Core$Test$Y) / length(Core$Test$Y)
model = knn_caret(Core$Train$X, Core$Train$Y)
yhats = predict(model, newdata = Core$Test$X)
sum(yhats == Core$Test$Y) / length(Core$Test$Y)
knn_caret <- function(X, Y) {
fitControl = trainControl(method = "cv")
gridControl = expand.grid(k = 1:50)
knn_fit = train(X, factor(Y),
method = "knn",
trControl = fitControl,
tuneGrid = gridControl)
return(knn_fit)
}
ada_caret <- function(X, Y) {
fitControl = trainControl(method = "cv")
gridControl = expand.grid(method = "Adaboost.M1", nIter = c(5, 10))
ada_fit = train(X, factor(Y),
method = "adaboost",
trControl = fitControl,
tuneGrid = gridControl)
return(ada_fit)
}
layer_1_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Models[[2]] = knn_caret
Models[[3]] = knn_caret
Models[[4]] = knn_caret
Models[[5]] = knn_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X)
}
Core$Train$X1 = data.frame(Features)
Core$Models$Layer1 = Trained_Models
return(Core)
}
layer_1_new_data <- function(Core) {
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer1))
for (i in 1:length(Core$Models$Layer1)) {
Features[, i] = predict(Core$Models$Layer1[[i]], newdata = Core$Test$X)
}
Core$Test$X1 = data.frame(Features)
return(Core)
}
Core = layer_1_old_data(Core)
Core = layer_2_old_data(Core)
Core = layer_1_new_data(Core)
Core = layer_2_new_data(Core)
sum(Core$Test$X2 == Core$Test$Y) / length(Core$Test$Y)
model = knn_caret(Core$Train$X, Core$Train$Y)
yhats = predict(model, newdata = Core$Test$X)
sum(yhats == Core$Test$Y) / length(Core$Test$Y)
Core = layer_2_new_data(Core)
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer2))
layer_2_new_data <- function(Core) {
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer2))
for (i in 1:length(Core$Models$Layer2)) {
Features[, i] = predict(Core$Models$Layer2[[i]], newdata = Core$Test$X1)
}
Core$Test$X2 = Features
return(Core)
}
Core = layer_1_old_data(Core)
Core = layer_2_old_data(Core)
Core = layer_1_new_data(Core)
Core = layer_2_new_data(Core)
sum(Core$Test$X2 == Core$Test$Y) / length(Core$Test$Y)
model = knn_caret(Core$Train$X, Core$Train$Y)
yhats = predict(model, newdata = Core$Test$X)
sum(yhats == Core$Test$Y) / length(Core$Test$Y)
layer_1_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Models[[2]] = knn_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X)
}
Core$Train$X1 = data.frame(Features)
Core$Models$Layer1 = Trained_Models
return(Core)
}
source('~/Documents/other/languages/r/R/rstudio/machine-learning/Stacking/models/all.R')
source('~/Documents/other/languages/r/R/rstudio/machine-learning/Stacking/run.R')
sum(Core$Test$X2 == Core$Test$Y) / length(Core$Test$Y)
sum(yhats == Core$Test$Y) / length(Core$Test$Y)
ada_fit = train(X, factor(Y),
method = "lda",
trControl = fitControl,
tuneGrid = gridControl)
fitControl = trainControl(method = "none")
gridControl = expand.grid()
ada_fit = train(X, factor(Y),
method = "lda",
trControl = fitControl,
tuneGrid = gridControl)
gridControl = expand.grid(NA)
ada_fit = train(X, factor(Y),
method = "lda",
trControl = fitControl,
tuneGrid = gridControl)
gridControl = expand.grid(None)
ada_fit = train(X, factor(Y),
method = "lda",
trControl = fitControl,
tuneGrid = gridControl)
ada_fit = train(X, factor(Y),
method = "lda",
trControl = fitControl)
knn_caret <- function(X, Y) {
fitControl = trainControl(method = "cv")
gridControl = expand.grid(k = 1:25)
knn_fit = train(X, factor(Y),
method = "knn",
trControl = fitControl,
tuneGrid = gridControl)
return(knn_fit)
}
ada_caret <- function(X, Y) {
fitControl = trainControl(method = "cv")
gridControl = expand.grid(method = "Adaboost.M1", nIter = c(5, 10))
ada_fit = train(X, factor(Y),
method = "lda",
trControl = fitControl,
tuneGrid = gridControl)
return(ada_fit)
}
lda_caret <- function(X, Y) {
fitControl = trainControl(method = "none")
lda_fit = train(X, factor(Y),
method = "lda",
trControl = fitControl)
return(lda_fit)
}
layer_1_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Models[[2]] = lda_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X)
}
Core$Train$X1 = data.frame(Features)
Core$Models$Layer1 = Trained_Models
return(Core)
}
layer_1_new_data <- function(Core) {
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer1))
for (i in 1:length(Core$Models$Layer1)) {
Features[, i] = predict(Core$Models$Layer1[[i]], newdata = Core$Test$X)
}
Core$Test$X1 = data.frame(Features)
return(Core)
}
Core = layer_1_old_data(Core)
Core = layer_2_old_data(Core)
Core = layer_1_new_data(Core)
Core = layer_2_new_data(Core)
sum(Core$Test$X2 == Core$Test$Y) / length(Core$Test$Y)
model = knn_caret(Core$Train$X, Core$Train$Y)
yhats = predict(model, newdata = Core$Test$X)
sum(yhats == Core$Test$Y) / length(Core$Test$Y)
Models[[1]] = lda_caret
layer_2_old_data <- function(Core) {
Models = list()
Models[[1]] = lda_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X1, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X1)
}
Core$Train$X2 = data.frame(Features)
Core$Models$Layer2 = Trained_Models
return(Core)
}
layer_2_new_data <- function(Core) {
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer2))
for (i in 1:length(Core$Models$Layer2)) {
Features[, i] = predict(Core$Models$Layer2[[i]], newdata = Core$Test$X1)
}
Core$Test$X2 = Features
return(Core)
}
Core = layer_1_old_data(Core)
Core = layer_2_old_data(Core)
Core = layer_1_new_data(Core)
Core = layer_2_new_data(Core)
sum(Core$Test$X2 == Core$Test$Y) / length(Core$Test$Y)
model = knn_caret(Core$Train$X, Core$Train$Y)
yhats = predict(model, newdata = Core$Test$X)
sum(yhats == Core$Test$Y) / length(Core$Test$Y)
layer_1_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Models[[2]] = lda_caret
Models[[3]] = lda_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X)
}
Core$Train$X1 = data.frame(Features)
Core$Models$Layer1 = Trained_Models
return(Core)
}
layer_1_new_data <- function(Core) {
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer1))
for (i in 1:length(Core$Models$Layer1)) {
Features[, i] = predict(Core$Models$Layer1[[i]], newdata = Core$Test$X)
}
Core$Test$X1 = data.frame(Features)
return(Core)
}
Core = layer_1_old_data(Core)
Core = layer_2_old_data(Core)
Core = layer_1_new_data(Core)
Core = layer_2_new_data(Core)
sum(Core$Test$X2 == Core$Test$Y) / length(Core$Test$Y)
model = knn_caret(Core$Train$X, Core$Train$Y)
yhats = predict(model, newdata = Core$Test$X)
sum(yhats == Core$Test$Y) / length(Core$Test$Y)
nb_caret <- function(X, Y) {
fitControl = trainControl(method = "none")
gridControl = expand.grid(fL = 0, usekernel = TRUE, adjust = FALSE)
nb_fit = train(X, factor(Y),
method = "naive_bayes",
trControl = fitControl,
tuneGrid = gridControl)
}
layer_1_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Models[[2]] = lda_caret
Models[[3]] = lda_caret
Models[[4]] = nb_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X)
}
Core$Train$X1 = data.frame(Features)
Core$Models$Layer1 = Trained_Models
return(Core)
}
layer_1_new_data <- function(Core) {
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer1))
for (i in 1:length(Core$Models$Layer1)) {
Features[, i] = predict(Core$Models$Layer1[[i]], newdata = Core$Test$X)
}
Core$Test$X1 = data.frame(Features)
return(Core)
}
layer_2_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X1, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X1)
}
Core$Train$X2 = data.frame(Features)
Core$Models$Layer2 = Trained_Models
return(Core)
}
layer_2_new_data <- function(Core) {
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer2))
for (i in 1:length(Core$Models$Layer2)) {
Features[, i] = predict(Core$Models$Layer2[[i]], newdata = Core$Test$X1)
}
Core$Test$X2 = Features
return(Core)
}
Core = layer_1_old_data(Core)
Core = layer_1_old_data(Core)
nb_caret <- function(X, Y) {
fitControl = trainControl(method = "none")
gridControl = expand.grid(laplace = 0, usekernel = TRUE, adjust = FALSE)
nb_fit = train(X, factor(Y),
method = "naive_bayes",
trControl = fitControl,
tuneGrid = gridControl)
}
Core = layer_1_old_data(Core)
Core = layer_2_old_data(Core)
Core = layer_1_new_data(Core)
Core = layer_2_new_data(Core)
sum(Core$Test$X2 == Core$Test$Y) / length(Core$Test$Y)
model = knn_caret(Core$Train$X, Core$Train$Y)
yhats = predict(model, newdata = Core$Test$X)
sum(yhats == Core$Test$Y) / length(Core$Test$Y)
layer_1_old_data <- function(Core) {
Models = list()
Models[[1]] = knn_caret
Models[[2]] = lda_caret
Models[[3]] = ada_caret
Models[[4]] = nb_caret
Trained_Models = list()
Features = matrix(0, nrow = nrow(Core$Train$X), ncol = length(Models))
for (i in 1:length(Models)) {
Trained_Models[[i]] = Models[[i]](Core$Train$X, Core$Train$Y)
Features[, i] = predict(Trained_Models[[i]], newdata = Core$Train$X)
}
Core$Train$X1 = data.frame(Features)
Core$Models$Layer1 = Trained_Models
return(Core)
}
layer_1_new_data <- function(Core) {
Features = matrix(0, nrow = nrow(Core$Test$X), ncol = length(Core$Models$Layer1))
for (i in 1:length(Core$Models$Layer1)) {
Features[, i] = predict(Core$Models$Layer1[[i]], newdata = Core$Test$X)
}
Core$Test$X1 = data.frame(Features)
return(Core)
}
Core = layer_1_old_data(Core)
Core = layer_2_old_data(Core)
Core = layer_1_new_data(Core)
Core = layer_2_new_data(Core)
sum(Core$Test$X2 == Core$Test$Y) / length(Core$Test$Y)
model = knn_caret(Core$Train$X, Core$Train$Y)
yhats = predict(model, newdata = Core$Test$X)
sum(yhats == Core$Test$Y) / length(Core$Test$Y)
ada_caret <- function(X, Y) {
fitControl = trainControl(method = "cv")
gridControl = expand.grid(method = "Adaboost.M1", nIter = c(5, 10))
ada_fit = train(X, factor(Y),
method = "lda",
trControl = fitControl,
tuneGrid = gridControl)
return(ada_fit)
}
n = 1000
p = 50
X = data.frame(matrix(rnorm(n*p), nrow = n))
Y = sample(c(1, 2), size = n, replace = TRUE)
X_test = data.frame(matrix(rnorm(n*p), nrow = n))
Y_test = sample(c(1, 2), size = n, replace = TRUE)
Core = list()
Core$Train$X = X
Core$Train$Y = Y
Core$Test$X = X_test
Core$Test$Y = Y_test
source('~/Documents/other/languages/r/R/rstudio/machine-learning/Stacking/models/all.R')
source('~/Documents/other/languages/r/R/rstudio/machine-learning/Stacking/layer 1.R')
source('~/Documents/other/languages/r/R/rstudio/machine-learning/Stacking/layer 2.R')
source('~/Documents/other/languages/r/R/rstudio/machine-learning/Stacking/run.R')
